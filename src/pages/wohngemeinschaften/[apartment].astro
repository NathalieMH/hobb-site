---
import Layout from "../../layouts/Layout.astro";
import { getCollection } from "astro:content";
const base = import.meta.env.BASE_URL;

export async function getStaticPaths() {
  const apartments = await getCollection("apartments");
  return apartments.map(({ slug }) => ({ params: { apartment: slug } }));
}

const { apartment } = Astro.params;
const apartments = await getCollection("apartments");
const apt = apartments.find((a) => a.slug === apartment);

// Rooms linked by apartment slug (e.g., "apartment-3")
const rooms = await getCollection("rooms", (r) => r.data.apartment === apartment);

// Pre-render room markdown so we can show full text inside the modal
const renderedRooms = await Promise.all(
  rooms.map(async (r) => {
    const { Content } = await r.render();
    return { entry: r, Content };
  })
);
---

<Layout title={apt?.data.title ?? "Wohngemeinschaft"}>
  <div class="container">

    <!-- Header: floorplan + details -->
    <section class="apartment-header">
      <div class="apartment-image">
        {apt?.data.floorplan ? (
          <img src={`${base}${apt.data.floorplan}`} alt={apt.data.title} />
        ) : (
          <div class="placeholder">[Kein Plan vorhanden]</div>
        )}
      </div>

      <div class="apartment-details">
        <h1>{apt?.data.title}</h1>
        {apt?.data.details && <p class="details">{apt.data.details.join(" / ")}</p>}
        <div class="description">
          {apt?.body ? <Fragment set:html={apt.body} /> : null}
        </div>
      </div>
    </section>

    <!-- Room thumbnails on the apartment page -->
    <section class="rooms-section">
      <h2>Zimmer</h2>
      <div class="rooms-grid">
        {rooms.map(({ data, slug }) => {
          const hasImg = data.images && data.images.length > 0;
          const imgSrc = hasImg ? `${base}${data.images[0]}` : null;

          return (
            <button
              class="room-card open-room"
              data-room={slug}
              aria-label={`Zimmer ${data.title} öffnen`}
            >
              {hasImg ? (
                <img src={imgSrc} alt={data.title} />
              ) : (
                <div class="room-placeholder">[Kein Bild verfügbar]</div>
              )}
              <p><strong>&gt; {data.title}</strong></p>
            </button>
          );
        })}
      </div>
    </section>

    <!-- Hidden templates: one per room (used by the modal) -->
    {renderedRooms.map(({ entry, Content }) => {
      const d = entry.data;
      const imgs = Array.isArray(d.images) ? d.images.map((p) => `${base}${p.replace(/^\/+/, "")}`) : [];
      const cover = imgs[0] ?? null;
      const hasGallery = imgs.length > 1;

      return (
        <template id={`tpl-${entry.slug}`}>
          <!-- Store images on the article for JS -->
          <article class="modal-content" data-images={JSON.stringify(imgs)}>
            <div class="modal-left">
              {hasGallery && (
                <button class="nav prev" aria-label="Vorheriges Bild">‹</button>
              )}

              {cover ? (
                <img class="modal-cover" src={cover} alt={d.title} data-index="0" />
              ) : (
                <div class="room-placeholder large modal-cover" data-index="-1">[Kein Bild verfügbar]</div>
              )}

              {hasGallery && (
                <button class="nav next" aria-label="Nächstes Bild">›</button>
              )}

              {hasGallery && (
                <div class="thumbs" role="list">
                  {imgs.map((url, i) => (
                    <button
                      class={`thumb ${i === 0 ? "active" : ""}`}
                      data-full={url}
                      data-index={i}
                      aria-label={`Bild ${i + 1} ansehen`}
                      role="listitem"
                    >
                      <img src={url} alt={`Vorschau ${i + 1} von ${d.title}`} />
                    </button>
                  ))}
                </div>
              )}
            </div>

            <div class="modal-right">
              <h3>{d.title}</h3>
              <ul class="meta">
                {d.size_m2 && <li><strong>Größe:</strong> {d.size_m2} m²</li>}
                {typeof d.cold_rent_eur !== "undefined" && (
                  <li><strong>Kaltmiete:</strong> {d.cold_rent_eur} €</li>
                )}
                {d.available_from && <li><strong>Verfügbar ab:</strong> {d.available_from}</li>}
                {d.teaser && <li><strong>Info:</strong> {d.teaser}</li>}
              </ul>
              <div class="room-description">
                <Content />
              </div>
            </div>
          </article>
        </template>
      );
    })}

    <!-- Shared modal/overlay -->
    <div id="overlay" class="overlay hidden" aria-hidden="true">
      <div class="modal-card" role="dialog" aria-modal="true" aria-label="Zimmerdetails">
        <button class="modal-close" aria-label="Schließen">×</button>
        <div id="modal-body"></div>
      </div>
    </div>

  </div>
</Layout>

<style>
/* Centered page container */
.container {
  max-width: 1100px;
  margin: 0 auto;
  padding: 0 1.25rem;
}

/* Header (floorplan + details) */
.apartment-header {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  justify-content: center;
  gap: 2rem;
  margin: 2rem 0;
}
.apartment-image {
  display: flex; justify-content: center;
  flex: 0 1 600px;
}
.apartment-image img {
  max-width: 600px; width: 100%;
  border: 1px solid #ccc;
  box-shadow: 0 2px 6px rgba(0,0,0,0.15);
}
.placeholder {
  width: 600px; height: 400px;
  background: #f0f0f0; color: #888; border: 1px dashed #ccc;
  display: flex; align-items: center; justify-content: center;
}

.apartment-details { flex: 1 1 300px; min-width: 260px; }
.apartment-details h1 { font-size: 1.5rem; font-weight: bold; }
.details { font-weight: bold; margin: .5rem 0 1rem; }

/* Rooms list on the apartment page */
.rooms-section { margin-top: 3rem; }
.rooms-grid {
  display: flex; flex-wrap: wrap; gap: 1.5rem; justify-content: flex-start;
}
.room-card {
  width: 220px; background: transparent; border: none; padding: 0;
  text-align: center; cursor: pointer; color: black;
}
.room-card img {
  width: 100%; border: 1px solid #ccc;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}
.room-card p { margin-top: .5rem; font-size: .9rem; }

.room-placeholder {
  width: 100%; aspect-ratio: 4/3; background: #f0f0f0;
  color: #888; border: 1px dashed #ccc;
  display: flex; align-items: center; justify-content: center; font-size: .9rem;
}
.room-placeholder.large { aspect-ratio: 4/3; }

/* Modal overlay */
.overlay {
  position: fixed; inset: 0; background: rgba(0,0,0,.45);
  display: grid; place-items: center; padding: 2rem; z-index: 1000;
}
.hidden { display: none; }

.modal-card {
  background: white; width: min(100%, 960px);
  max-height: 90vh; overflow: auto; border-radius: 12px;
  box-shadow: 0 20px 60px rgba(0,0,0,.25);
  position: relative; padding: 1.25rem;
}

/* Modal internal layout */
.modal-content {
  display: grid; grid-template-columns: 1fr 1fr; gap: 1.25rem;
}
.modal-left { position: relative; }
.modal-left img.modal-cover {
  width: 100%; border: 1px solid #ddd;
  box-shadow: 0 2px 6px rgba(0,0,0,.1);
}

/* Thumbnails row (only when 2+ images) */
.thumbs {
  display: flex; flex-wrap: wrap; gap: .75rem;
  margin-top: .75rem;
}
.thumb {
  position: relative;                 /* needed for overlay */
  border: none; padding: 0; background: transparent; cursor: pointer;
  width: 110px; height: 82px;         /* ≈ 4:3 */
  display: block; border-radius: 4px; overflow: hidden;
  outline-offset: 2px;
}
.thumb img {
  width: 100%; height: 100%; object-fit: cover; border: 1px solid #ddd;
  box-shadow: 0 1px 2px rgba(0,0,0,.08);
}
/* White overlay to make non-active thumbs look "blasser" */
.thumb::after {
  content: "";
  position: absolute; inset: 0;
  background: rgba(255,255,255,0.3);  /* ~30% white */
  transition: opacity .2s ease;
  opacity: 1;                         /* default = dimmed */
}
.thumb.active::after { opacity: 0; }   /* active = full color */
.thumb:hover::after { opacity: .15; }  /* slightly less dim on hover */

/* Optional subtle active outline (kept) */
.thumb.active img { outline: 2px solid #333; }

/* Nav arrows over the large image */
.nav {
  position: absolute; top: 45%; transform: translateY(-50%);
  background: rgba(0,0,0,0.55); color: #fff; border: none;
  width: 36px; height: 48px; border-radius: 6px; cursor: pointer;
  font-size: 1.5rem; line-height: 1; display: grid; place-items: center;
}
.nav.prev { left: 8px; }
.nav.next { right: 8px; }
.nav:hover { background: rgba(0,0,0,0.7); }

/* Right side of modal */
.modal-right h3 { margin-top: 0; }
.meta { list-style: none; padding: 0; margin: .5rem 0 1rem; }
.meta li { margin: .25rem 0; }
.room-description :where(p, ul, ol){ margin: .5rem 0; }

/* Minimal, elegant close “×” in the top-right of the card */
.modal-close {
  position: absolute;
  top: 8px;
  right: 10px;
  background: none;
  border: none;
  color: #000;
  font-size: 26px;
  line-height: 1;
  padding: 4px;
  cursor: pointer;
}
.modal-close:hover { opacity: .6; }
.modal-close:focus { outline: 2px solid #000; outline-offset: 2px; }

/* Responsive modal + header stacking */
@media (max-width: 800px) {
  .modal-content { grid-template-columns: 1fr; }
}
@media (max-width: 900px) {
  .apartment-image { flex-basis: 100%; }
  .apartment-details { flex-basis: 100%; }
}
</style>

<script>
  // Open/close modal + thumbnails + left/right navigation
  document.addEventListener("click", (e) => {
    const btn = e.target.closest(".open-room");
    const overlay = document.getElementById("overlay");
    const body = document.getElementById("modal-body");

    // Open modal
    if (btn) {
      e.preventDefault();
      const slug = btn.getAttribute("data-room");
      const tpl = document.getElementById(`tpl-${slug}`);
      if (tpl) {
        body.innerHTML = "";
        body.appendChild(tpl.content.cloneNode(true));
        overlay.classList.remove("hidden");
        document.body.style.overflow = "hidden";

        // Ensure initial active thumb state (index 0) if gallery exists
        const article = body.querySelector(".modal-content");
        const firstThumb = article?.querySelector('.thumb[data-index="0"]');
        if (firstThumb) {
          article.querySelectorAll(".thumb").forEach(t => t.classList.remove("active"));
          firstThumb.classList.add("active");
        }
      }
      return;
    }

    // Close modal (× or clicking overlay)
    if (e.target.matches(".modal-close") || (overlay && e.target === overlay)) {
      overlay.classList.add("hidden");
      document.body.style.overflow = "";
      return;
    }

    // Thumbnail click inside modal
    const thumb = e.target.closest(".thumb");
    if (thumb && body.contains(thumb)) {
      const article = thumb.closest(".modal-content");
      const cover = article.querySelector(".modal-cover");
      const newUrl = thumb.getAttribute("data-full");
      const idx = thumb.getAttribute("data-index") || "0";

      if (cover.tagName !== "IMG") {
        const img = document.createElement("img");
        img.className = "modal-cover";
        img.alt = "";
        img.src = newUrl;
        img.setAttribute("data-index", idx);
        cover.replaceWith(img);
      } else {
        cover.setAttribute("src", newUrl);
        cover.setAttribute("data-index", idx);
      }

      article.querySelectorAll(".thumb").forEach(t => t.classList.remove("active"));
      thumb.classList.add("active");
      return;
    }

    // Left/right nav buttons inside modal
    const navBtn = e.target.closest(".nav");
    if (navBtn && body.contains(navBtn)) {
      const article = navBtn.closest(".modal-content");
      const cover = article.querySelector(".modal-cover");
      const imgs = JSON.parse(article.getAttribute("data-images") || "[]");
      if (!imgs || imgs.length < 2) return;

      let idx = parseInt(cover.getAttribute("data-index") || "0", 10);
      if (isNaN(idx) || idx < 0) idx = 0;

      const dir = navBtn.classList.contains("next") ? 1 : -1;
      const newIdx = (idx + dir + imgs.length) % imgs.length;
      const newUrl = imgs[newIdx];

      if (cover.tagName !== "IMG") {
        const img = document.createElement("img");
        img.className = "modal-cover";
        img.alt = "";
        img.src = newUrl;
        img.setAttribute("data-index", String(newIdx));
        cover.replaceWith(img);
      } else {
        cover.setAttribute("src", newUrl);
        cover.setAttribute("data-index", String(newIdx));
      }

      article.querySelectorAll(".thumb").forEach(t => t.classList.remove("active"));
      const activeThumb = article.querySelector(`.thumb[data-index="${newIdx}"]`);
      if (activeThumb) activeThumb.classList.add("active");
      return;
    }
  });

  // Close on Escape
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      const overlay = document.getElementById("overlay");
      if (overlay && !overlay.classList.contains("hidden")) {
        overlay.classList.add("hidden");
        document.body.style.overflow = "";
      }
    }
  });
</script>
